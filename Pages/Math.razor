@page "/math"
@inject IJSRuntime JS

<h3>🧠 Juego de Sumas, Restas y Multiplicación</h3>

<p><strong>¿Cuánto es @numero1 @operador @numero2?</strong></p>

<div class="d-flex flex-wrap gap-3">
    @foreach (var opcion in opcionesRespuesta)
    {
        <button class="btn @(mostrarResultado ? (opcion == resultadoCorrecto ? "btn-success" : "btn-danger") : "btn-primary")"
                style="width: 80px; height: 50px; font-size: 20px"
                disabled="@mostrarResultado"
                @onclick="() => ValidarRespuesta(opcion)">
            @opcion
        </button>
    }
</div>

@if (mensaje != null)
{
    <div class="mt-3" style="display: flex; align-items: center; gap: 10px;">
        <span style="font-size: 24px; color:@colorMensaje">
            @if (respuestaCorrecta)
            {
                <i class="fas fa-check-circle"></i>
            }
            else
            {
                <i class="fas fa-times-circle"></i>
            }
        </span>
        <p style="margin: 0; color:@colorMensaje">@mensaje</p>
    </div>
}

<button class="btn btn-secondary mt-4" @onclick="GenerarPregunta">Nueva pregunta</button>

<audio id="sonidoCorrecto" src="sounds/correct.mp3"></audio>
<audio id="sonidoIncorrecto" src="sounds/wrong.mp3"></audio>

@code {
    private int numero1;
    private int numero2;
    private string operador = "+";
    private int resultadoCorrecto;
    private List<int> opcionesRespuesta = new();
    private string mensaje;
    private string colorMensaje = "black";
    private bool mostrarResultado = false;
    private bool respuestaCorrecta = false;
    private Random rnd = new();

    protected override void OnInitialized()
    {
        GenerarPregunta();
    }

    private void GenerarPregunta()
    {
        int operadorIndex = rnd.Next(3);
        operador = operadorIndex switch
        {
            0 => "+",
            1 => "-",
            _ => "*"
        };

        if (operador == "*")
        {
            numero1 = rnd.Next(2, 10);
            numero2 = rnd.Next(2, 10);
        }
        else
        {
            numero1 = rnd.Next(1, 20);
            numero2 = rnd.Next(1, 20);
            if (operador == "-" && numero2 > numero1)
            {
                var temp = numero1;
                numero1 = numero2;
                numero2 = temp;
            }
        }

        resultadoCorrecto = operador switch
        {
            "+" => numero1 + numero2,
            "-" => numero1 - numero2,
            "*" => numero1 * numero2,
            _ => 0
        };

        // Generar opciones
        var respuestas = new HashSet<int> { resultadoCorrecto };
        while (respuestas.Count < 3)
        {
            int falsa = resultadoCorrecto + rnd.Next(-10, 10);
            if (falsa != resultadoCorrecto && falsa > 0)
                respuestas.Add(falsa);
        }

        opcionesRespuesta = respuestas.OrderBy(x => rnd.Next()).ToList();
        mensaje = null;
        mostrarResultado = false;
    }

    private async Task ValidarRespuesta(int seleccionada)
    {
        mostrarResultado = true;

        if (seleccionada == resultadoCorrecto)
        {
            mensaje = "¡Muy bien! 🎉";
            colorMensaje = "green";
            respuestaCorrecta = true;
            await JS.InvokeVoidAsync("playSound", "sonidoCorrecto");
        }
        else
        {
            mensaje = $"Ups, intenta de nuevo. 😕 La respuesta correcta era {resultadoCorrecto}.";
            colorMensaje = "red";
            respuestaCorrecta = false;
            await JS.InvokeVoidAsync("playSound", "sonidoIncorrecto");
        }
    }
}


